# Routes
# This file defines all() application routes (Higher priority routes first)
# ~~~~

GET           /                                                                controllers.HomepageController.index()

# Degree 
PUT           /degrees/:id                                                     controllers.DegreeController.update(id)
GET           /degrees                                                         controllers.DegreeController.all()
GET           /degrees/:id                                                     controllers.DegreeController.get(id)

# Course 
POST          /courses                                                         controllers.CourseController.create()
PUT           /courses/:id                                                     controllers.CourseController.updateFrom(id)
GET           /courses                                                         controllers.CourseController.all()
GET           /courses/:id                                                     controllers.CourseController.get(id)

# Group
GET           /courses/:c/labworks/:l/groups                                   controllers.GroupController.allFrom(c, l)
GET           /courses/:c/labworks/:l/groups/preview                           controllers.GroupController.preview(c, l)
GET           /courses/:c/labworks/:l/groups/sheet                             controllers.GroupController.renderGroupSheet(c, l)

# Labwork 
GET           /labworks/degrees/:degree                                        controllers.LabworkController.allWithDegree(degree)
GET           /labworks/:id                                                    controllers.LabworkController.get(id)

# Labwork restricted
POST          /courses/:course/labworks                                        controllers.LabworkController.createFrom(course)
PUT           /courses/:course/labworks/:id                                    controllers.LabworkController.updateFrom(course, id)
GET           /courses/:course/labworks                                        controllers.LabworkController.allFrom(course)
GET           /courses/:course/labworks/:id                                    controllers.LabworkController.getFrom(course, id)
DELETE        /courses/:course/labworks/:id                                    controllers.LabworkController.invalidateFrom(course, id)

# Room
POST          /rooms                                                           controllers.RoomController.create()
PUT           /rooms/:id                                                       controllers.RoomController.update(id)
GET           /rooms                                                           controllers.RoomController.all()
GET           /rooms/:id                                                       controllers.RoomController.get(id)
DELETE        /rooms/:id                                                       controllers.RoomController.invalidate(id)

# Semester 
POST          /semesters                                                       controllers.SemesterController.create()
PUT           /semesters/:id                                                   controllers.SemesterController.update(id)
GET           /semesters                                                       controllers.SemesterController.all()
GET           /semesters/:id                                                   controllers.SemesterController.get(id)
DELETE        /semesters/:id                                                   controllers.SemesterController.invalidate(id)

# Role restricted
GET           /courses/:c/roles                                                controllers.RoleController.allFrom(c)

# Authority 
GET           /authorities                                                     controllers.AuthorityController.all()
GET           /authorities/:id                                                 controllers.AuthorityController.get(id)

# Authority restricted
POST          /courses/:c/authorities                                          controllers.AuthorityController.createFrom(c)
DELETE        /courses/:c/authorities/:id                                      controllers.AuthorityController.invalidateFrom(c, id)

# LabworkApplications 
POST          /labworkApplications                                             controllers.LabworkApplicationController.create()
POST          /courses/:c/labworkApplications                                  controllers.LabworkApplicationController.createFrom(c)
PUT           /labworkApplications/:id                                         controllers.LabworkApplicationController.update(id)
PUT           /courses/:c/labworkApplications/:id                              controllers.LabworkApplicationController.updateFrom(c, id)
GET           /labworkApplications                                             controllers.LabworkApplicationController.all()
GET           /courses/:c/labworks/:l/labworkApplications                      controllers.LabworkApplicationController.allFrom(c, l)
GET           /labworkApplications/:id                                         controllers.LabworkApplicationController.get(id)
DELETE        /labworkApplications/:id                                         controllers.LabworkApplicationController.invalidate(id)
DELETE        /courses/:c/labworkApplications/:id                              controllers.LabworkApplicationController.invalidateFrom(c, id)
GET           /courses/:c/labworks/:l/labworkApplications/sheet                controllers.LabworkApplicationController.renderApplicantSheet(c, l)
GET           /courses/:c/labworks/:l/labworkApplications/count                controllers.LabworkApplicationController.countFrom(c, l)

# Schedule / ScheduleEntries Gen
POST          /courses/:c/scheduleEntries                                      controllers.ScheduleEntryController.createFrom(c)
GET           /courses/:c/labworks/:l/scheduleEntries/preview                  controllers.ScheduleEntryController.preview(c, l)

# Schedule / ScheduleEntries Other
POST          /courses/:c/scheduleEntries/entry                                controllers.ScheduleEntryController.createEntry(c)
GET           /courses/:c/scheduleEntries                                      controllers.ScheduleEntryController.allFrom(c)
GET           /courses/:c/labworks/:l/scheduleEntries                          controllers.ScheduleEntryController.allFromLabwork(c, l)
GET           /courses/:c/scheduleEntries/:id                                  controllers.ScheduleEntryController.getFrom(c, id)
PUT           /courses/:c/scheduleEntries/:id                                  controllers.ScheduleEntryController.updateFrom(c, id)
DELETE        /courses/:c/labworks/:l/scheduleEntries                          controllers.ScheduleEntryController.invalidateFrom(c, l)

# Timetable
POST          /courses/:c/timetables                                           controllers.TimetableController.createFrom(c)
PUT           /courses/:c/timetables/:id                                       controllers.TimetableController.updateFrom(c, id)
GET           /courses/:c/timetables                                           controllers.TimetableController.allFrom(c)
GET           /courses/:c/timetables/:id                                       controllers.TimetableController.getFrom(c, id)
DELETE        /courses/:c/timetables/:id                                       controllers.TimetableController.invalidateFrom(c, id)
DELETE        /courses/:c/timetables/:tid/blacklists/:bid                      controllers.TimetableController.removeBlacklistFrom(c, tid, bid)

# Blacklist 
POST          /blacklists                                                      controllers.BlacklistController.create()
POST          /blacklists/range                                                controllers.BlacklistController.createFromRange()
POST          /blacklists/year/:year                                           controllers.BlacklistController.createFor(year)
PUT           /blacklists/:id                                                  controllers.BlacklistController.update(id)
GET           /blacklists                                                      controllers.BlacklistController.all()
GET           /blacklists/year/:year                                           controllers.BlacklistController.preview(year)
GET           /blacklists/:id                                                  controllers.BlacklistController.get(id)
DELETE        /blacklists/:id                                                  controllers.BlacklistController.invalidate(id)

# ReportCardEntry 
GET           /reportCardEntries/student/:s                                    controllers.ReportCardEntryController.getForStudent(s)

# ReportCardEntry restricted
POST          /courses/:c/labworks/:l/reportCardEntries                        controllers.ReportCardEntryController.createFrom(c, l)
POST          /courses/:c/labworks/:l/reportCardEntries/extend                 controllers.ReportCardEntryController.extend(c, l)
GET           /courses/:c/labworks/:l/reportCardEntries/sheet                  controllers.ReportCardEntryController.renderStatSheet(c, l)
GET           /courses/:c/reportCardEntries                                    controllers.ReportCardEntryController.allFrom(c)
GET           /courses/:c/reportCardEntries/scheduleEntry/:sid                 controllers.ReportCardEntryController.fromScheduleEntry(c, sid)
GET           /courses/:c/reportCardEntries/withReschedules                    controllers.ReportCardEntryController.withReschedules(c)
GET           /courses/:c/rescheduleCandidates/semesters/:sid                  controllers.ReportCardEntryController.rescheduleCandidates(c, sid)
GET           /courses/:c/labworks/:l/reportCardEntries/count                  controllers.ReportCardEntryController.countFrom(c, l)
DELETE        /courses/:c/labworks/:l/reportCardEntries                        controllers.ReportCardEntryController.invalidateFrom(c, l)

# ReportCardEntryType 
PUT           /courses/:c/reportCardEntryTypes/:id                             controllers.ReportCardEntryTypeController.updateFrom(c, id)
PUT           /courses/:c/labworks/:l/reportCardEntryTypes                     controllers.ReportCardEntryTypeController.batchUpdate(c, l)

# ReportCardRescheduled
GET           /reportCardEntries/:id/reportCardReschedules                     controllers.ReportCardRescheduledController.forStudent(id)

# ReportCardRescheduled restricted
POST          /courses/:c/reportCardReschedules                                controllers.ReportCardRescheduledController.createFrom(c)
GET           /courses/:c/reportCardReschedules                                controllers.ReportCardRescheduledController.allFrom(c)
GET           /courses/:c/reportCardReschedules/:id                            controllers.ReportCardRescheduledController.getFrom(c, id)
PUT           /courses/:c/reportCardReschedules/:id                            controllers.ReportCardRescheduledController.updateFrom(c, id)
DELETE        /courses/:c/reportCardReschedules/:id                            controllers.ReportCardRescheduledController.invalidateFrom(c, id)

# ReportCardEvaluation 
GET           /reportCardEvaluations/student/:s                                controllers.ReportCardEvaluationController.get(s)

# ReportCardEvaluation restricted
POST          /courses/:c/labworks/:l/reportCardEvaluations                    controllers.ReportCardEvaluationController.createFrom(c, l)
GET           /courses/:c/labworks/:l/reportCardEvaluations                    controllers.ReportCardEvaluationController.allFrom(c, l)
GET           /courses/:c/labworks/:l/reportCardEvaluations/sheet              controllers.ReportCardEvaluationController.renderEvaluationSheet(c, l)
PUT           /courses/:c/labworks/:l/reportCardEvaluations/:id                controllers.ReportCardEvaluationController.updateFrom(c, l, id)
DELETE        /courses/:c/labworks/:l/reportCardEvaluations                    controllers.ReportCardEvaluationController.invalidateFromLabwork(c, l)
DELETE        /courses/:c/labworks/:l/students/:s/reportCardEvaluations        controllers.ReportCardEvaluationController.invalidateFromStudent(c, l, s)

# ReportCardEvaluationPattern 
POST          /courses/:c/reportCardEvaluationPatterns                         controllers.ReportCardEvaluationPatternController.createFrom(c)
GET           /courses/:c/reportCardEvaluationPatterns                         controllers.ReportCardEvaluationPatternController.allFrom(c)
GET           /courses/:c/reportCardEvaluationPatterns/:id                     controllers.ReportCardEvaluationPatternController.getFrom(c, id)
PUT           /courses/:c/reportCardEvaluationPatterns/:id                     controllers.ReportCardEvaluationPatternController.updateFrom(c, id)
DELETE        /courses/:c/reportCardEvaluationPatterns/:id                     controllers.ReportCardEvaluationPatternController.invalidateFrom(c, id)

# AssignmentEntries
POST          /courses/:c/assignmentEntries                                    controllers.AssignmentEntryController.createFrom(c)
POST          /courses/:c/assignmentEntries/insert/:index                      controllers.AssignmentEntryController.insert(c, index)
PUT           /courses/:c/assignmentEntries/takeover                           controllers.AssignmentEntryController.takeover(c)
PUT           /courses/:c/assignmentEntries/:id                                controllers.AssignmentEntryController.updateFrom(c, id)
GET           /courses/:c/assignmentEntries                                    controllers.AssignmentEntryController.allFrom(c)
GET           /courses/:c/assignmentEntries/:id                                controllers.AssignmentEntryController.getFrom(c, id)
DELETE        /courses/:c/assignmentEntries/:id                                controllers.AssignmentEntryController.invalidateFrom(c, id)

# Users
POST          /users                                                           controllers.UserController.createFromToken()
POST          /users/resolveByName                                             controllers.UserController.resolveStudentsByName()
POST          /users/byCampusIds                                               controllers.UserController.getByCampusIds()
GET           /users                                                           controllers.UserController.all()
GET           /labworks/:labwork/users/:user/buddies/:buddy                    controllers.UserController.buddy(labwork, user, buddy)
GET           /users/:id                                                       controllers.UserController.get(id)
PUT           /users/:id                                                       controllers.UserController.update(id)

PUT           /usersSync/:id                                                   controllers.UserSyncController.sync(id)
PUT           /usersSync                                                       controllers.UserSyncController.syncAll()

# Annotations
GET           /labworks/:l/annotations                                         controllers.AnnotationController.forStudent(l)

# Annotations restricted
POST          /courses/:c/annotations                                          controllers.AnnotationController.createFrom(c)
GET           /courses/:c/annotations                                          controllers.AnnotationController.allFrom(c)
GET           /courses/:c/annotations/count                                    controllers.AnnotationController.countFrom(c)
GET           /courses/:c/annotations/:id                                      controllers.AnnotationController.getFrom(c, id)
PUT           /courses/:c/annotations/:id                                      controllers.AnnotationController.updateFrom(c, id)
DELETE        /courses/:c/annotations/:id                                      controllers.AnnotationController.invalidateFrom(c, id)

# Student Search
GET           /studentSearch/:s                                                controllers.StudentSearchController.dashboard(s)

# Mail
POST          /courses/:c/mails                                                controllers.MailController.sendMailWithBody(c)
POST          /courses/:c/labworks/:l/mails                                    controllers.MailController.sendMailToAttendeesOf(c, l)

# Dashboard
GET           /dashboard                                                       controllers.DashboardController.dashboard()

# Service
PUT           /courses/:c/insertIntoGroup                                      controllers.serviceResource.LwmServiceController.insertStudentToGroup(c)
PUT           /courses/:c/removeFromGroup                                      controllers.serviceResource.LwmServiceController.removeStudentFromGroup(c)
PUT           /courses/:c/moveToGroup                                          controllers.serviceResource.LwmServiceController.moveStudentToGroup(c)
PUT           /courses/:c/evaluateExplicit                                     controllers.serviceResource.LwmServiceController.evaluateExplicit(c)
PUT           /service/mergeUsers                                              controllers.serviceResource.LwmServiceController.mergeUsers()
GET           /service/duplicateUsers                                          controllers.serviceResource.LwmServiceController.duplicateUsers()
GET           /service/usersWithoutRegistrationId                              controllers.serviceResource.LwmServiceController.usersWithoutRegistrationId()

# Search Query
PUT           /query                                                           controllers.QueryController.performQuery()
GET           /query/options                                                   controllers.QueryController.queryOptions()

# Dev
POST          /dev/go                                                          controllers.DevController.go()

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                    controllers.Assets.at(path="/public", file)